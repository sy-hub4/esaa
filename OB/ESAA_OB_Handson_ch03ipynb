{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPtFwxaUsTGoUhTyH+3xIm9"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# 3.1 MNIST"],"metadata":{"id":"MaU65XlEwuU6"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd"],"metadata":{"id":"mfNcX8VawN2a","executionInfo":{"status":"ok","timestamp":1738121541929,"user_tz":-540,"elapsed":1087,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}}},"execution_count":1,"outputs":[]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FztQ2PMVtoGO","executionInfo":{"status":"ok","timestamp":1738122456222,"user_tz":-540,"elapsed":8100,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"5c5a6027-4701-442a-b2b1-d5ba9fab7a3a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["dict_keys(['data', 'target', 'frame', 'categories', 'feature_names', 'target_names', 'DESCR', 'details', 'url'])"]},"metadata":{},"execution_count":20}],"source":["from sklearn.datasets import fetch_openml\n","mnist = fetch_openml('mnist_784', version=1)\n","mnist.keys()"]},{"cell_type":"code","source":["X, y = mnist[\"data\"], mnist['target']\n","print(X.shape) # 샘플이 하나의 행, 특성이 하나의 열로 구성된 배열을 가진 data 키\n","print(y.shape) # 레이블 배열을 담은 target 키"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"B1esppEUt8Ep","executionInfo":{"status":"ok","timestamp":1738122430832,"user_tz":-540,"elapsed":354,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"6cb42c01-068d-47ce-e260-cf4449a8c693"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["(70000, 784)\n","(70000,)\n"]}]},{"cell_type":"markdown","source":["이미지가 70000개 있고 각 이미지에는 784개의 특성이 있다. 이미지가 28*28 픽셀이기 때문이다. 개개의 특성은 0(흰색)부터 255(검은색)까지의 픽셀강도를 나타낸다"],"metadata":{"id":"PKLgP_asujd5"}},{"cell_type":"code","source":["# 이미지 하나를 확인해보기\n","\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","\n","some_digit = X.iloc[0].values\n","some_digit_image = some_digit.reshape(28, 28)\n","\n","plt.imshow(some_digit_image, cmap=\"binary\")\n","plt.axis(\"off\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":406},"id":"27q9rmSyub8e","executionInfo":{"status":"ok","timestamp":1738121585255,"user_tz":-540,"elapsed":311,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"04eab725-7139-4ce9-d534-fb6ae4e0d5fe"},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYUAAAGFCAYAAAASI+9IAAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAACMtJREFUeJzt3DloVlEexuGbGNegRjsVayGNC0oKwRW0UluxEK0iuDQGEVJYCtpp7MRKtBFT2CgKWoggKRQXMEVAxEKbkAhaKPJNM7zNDAz/O2PyTXye/uVcNOGX05yeTqfTaQCgaZre+f4AALqHKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQffP9AfCf/P79u7yZnZ39A1/yvzE2NtZq9+PHj/JmcnKyvLlx40Z5MzIyUt7cvXu3vGmaplm2bFl5c/HixfLm0qVL5c1C4KYAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEB7EW2A+ffpU3vz8+bO8efHiRXnz/Pnz8qZpmmZmZqa8uXfvXquzFpqNGzeWN2fPni1vxsfHy5uVK1eWN03TNJs3by5vdu/e3eqsv5GbAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAED0dDqdznx/BP/q1atXrXb79u0rb2ZnZ1udxdxatGhReXPr1q3ypr+/v7xpY/369a12a9asKW82bdrU6qy/kZsCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCAOGV1C41PT3dajc0NFTeTE1NtTproWnzb9fmxc6nT5+WN03TNEuWLClvvIBLlZsCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQPTN9wfw761du7bV7urVq+XNgwcPyputW7eWN+fOnStv2tqyZUt58+TJk/Kmv7+/vHn37l150zRNc+3atVY7qHBTACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAIieTqfTme+PYH59+/atvFm5cmV5Mzw8XN40TdPcvHmzvLl9+3Z5c+zYsfIGFho3BQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYDom+8PYP6tWrVqTs5ZvXr1nJzTNO0e0Tt69Gh509vr7yoWFj/RAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAERPp9PpzPdH8Hf4/v17q92hQ4fKm2fPnpU3Dx8+LG8OHDhQ3kA3c1MAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACA/i0fWmpqbKm23btpU3AwMD5c3evXvLm+3bt5c3TdM0p0+fLm96enpancXfy00BgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIDyIx4I0Pj5e3pw8ebK8+fbtW3nT1uXLl8ub48ePlzfr1q0rb1g43BQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAwoN48E9v374tb86fP1/ePHnypLxp69SpU+XN6OhoebNhw4byhu7kpgBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQHsSD/8LMzEx58+DBg1ZnnThxorxp8+u9f//+8ubx48flDd3JTQGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGA8Eoq/J9YunRpefPr16/yZvHixeXNo0ePyps9e/aUN/x5bgoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIA0TffHwDd4s2bN+XNvXv3ypuJiYnypmnaPW7XxuDgYHmza9euP/AlzAc3BQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYDwIB5db3Jysry5fv16eXP//v3y5suXL+XNXOrrq/+Kr1u3rrzp7fX35ULhfxKAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgPIhHK20egrtz506rs8bGxsqbjx8/tjqrm+3YsaO8GR0dLW8OHz5c3rBwuCkAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQogBAiAIAIQoAhAfxFpivX7+WN+/fvy9vzpw5U958+PChvOl2Q0ND5c2FCxdanXXkyJHyprfX333U+IkBIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAILySOgemp6fLm+Hh4VZnvX79uryZmppqdVY327lzZ3lz/vz58ubgwYPlzfLly8sbmCtuCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgDxVz+I9/Lly/LmypUr5c3ExER58/nz5/Km261YsaLV7ty5c+XN6OhoedPf31/ewELjpgBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABCiAECIAgAhCgCEKAAQf/WDeOPj43OymUuDg4PlzaFDh8qbRYsWlTcjIyPlTdM0zcDAQKsdUOemAECIAgAhCgCEKAAQogBAiAIAIQoAhCgAEKIAQIgCACEKAIQoABA9nU6nM98fAUB3cFMAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIEQBgBAFAEIUAAhRACBEAYAQBQBCFAAIUQAgRAGAEAUAQhQACFEAIP4BMdYEs23XkkoAAAAASUVORK5CYII=\n"},"metadata":{}}]},{"cell_type":"code","source":["y[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"K4OJHmqovXjR","executionInfo":{"status":"ok","timestamp":1738072208550,"user_tz":-540,"elapsed":15,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"94441e81-7cfc-4096-b7b1-fd9fe4f9426b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'5'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":6}]},{"cell_type":"code","source":["# 레이블은 문자열이다. 대부분의 머신러닝 알고리즘은 숫자를 기대하므로 y를 정수로 변환\n","\n","y = y.astype(np.uint8)"],"metadata":{"id":"jJWBA-UMwMsT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# y_train은 0부터 9까지\n","\n","X_train, X_test, y_train, y_test = X[:60000], X[60000:], y[:60000], y[60000:]"],"metadata":{"id":"qxV1l2TFwdYL","executionInfo":{"status":"ok","timestamp":1738122435644,"user_tz":-540,"elapsed":275,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}}},"execution_count":17,"outputs":[]},{"cell_type":"markdown","source":["# 3.2 이진 분류기 훈련"],"metadata":{"id":"QcfP_vqJwxKZ"}},{"cell_type":"markdown","source":["5감지기는 5와 5아님 두 개의 클래스를 구분할 수 있는 이진분류기의 한 예이다"],"metadata":{"id":"T9gxsEUgw5JI"}},{"cell_type":"code","source":["y_train_5 = (y_train == 5) # 5만 True고 다른 숫자는 모두 False\n","y_test_5 = (y_test == 5)"],"metadata":{"id":"WaITwnbkwyz-","executionInfo":{"status":"ok","timestamp":1738122437390,"user_tz":-540,"elapsed":258,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}}},"execution_count":18,"outputs":[]},{"cell_type":"markdown","source":["사이킷런의 SGDClassifier 모델을 만들고 전체 훈련 세트를 사용해 훈련"],"metadata":{"id":"sJfnfMXSxU7n"}},{"cell_type":"code","source":["from sklearn.linear_model import SGDClassifier\n","\n","sgd_clf = SGDClassifier(random_state=42)\n","sgd_clf.fit(X_train, y_train_5)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":356},"id":"jAUM_0-lxax3","executionInfo":{"status":"error","timestamp":1738122439942,"user_tz":-540,"elapsed":873,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"e3c5c616-a938-4e09-a051-63142db19b7a"},"execution_count":19,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"The number of classes has to be greater than one; got 1 class","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-0a1a6b63ec93>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0msgd_clf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mSGDClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m42\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0msgd_clf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train_5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mwrapper\u001b[0;34m(estimator, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1387\u001b[0m                 )\n\u001b[1;32m   1388\u001b[0m             ):\n\u001b[0;32m-> 1389\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mfit_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1390\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1391\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mwrapper\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_stochastic_gradient.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, coef_init, intercept_init, sample_weight)\u001b[0m\n\u001b[1;32m    930\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_more_validate_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    931\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 932\u001b[0;31m         return self._fit(\n\u001b[0m\u001b[1;32m    933\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    934\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_stochastic_gradient.py\u001b[0m in \u001b[0;36m_fit\u001b[0;34m(self, X, y, alpha, C, loss, learning_rate, coef_init, intercept_init, sample_weight)\u001b[0m\n\u001b[1;32m    717\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mt_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m1.0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    718\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 719\u001b[0;31m         self._partial_fit(\n\u001b[0m\u001b[1;32m    720\u001b[0m             \u001b[0mX\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    721\u001b[0m             \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/sklearn/linear_model/_stochastic_gradient.py\u001b[0m in \u001b[0;36m_partial_fit\u001b[0;34m(self, X, y, alpha, C, loss, learning_rate, max_iter, classes, sample_weight, coef_init, intercept_init)\u001b[0m\n\u001b[1;32m    661\u001b[0m             )\n\u001b[1;32m    662\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 663\u001b[0;31m             raise ValueError(\n\u001b[0m\u001b[1;32m    664\u001b[0m                 \u001b[0;34m\"The number of classes has to be greater than one; got %d class\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    665\u001b[0m                 \u001b[0;34m%\u001b[0m \u001b[0mn_classes\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: The number of classes has to be greater than one; got 1 class"]}]},{"cell_type":"code","source":["sgd_clf.predict([some_digit]) # 숫자 5의 이미지를 감지해보기"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wcW9rICAxr1x","executionInfo":{"status":"ok","timestamp":1738072240822,"user_tz":-540,"elapsed":20,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"adf6bd61-2dcc-4aa5-8601-c20c9b4f627a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but SGDClassifier was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([ True])"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["# 3.3 성능 측정"],"metadata":{"id":"g-Gv10elx-mL"}},{"cell_type":"markdown","source":["## 3.3.1 교차검증을 사용한 정확도 측정"],"metadata":{"id":"RRm4ngWwyEL5"}},{"cell_type":"code","source":["# 가끔 사이킷런이 제공하는 기능보다 교차 검증 과정을 더 많이 제어해야 할 필요가 있다. 아래 코드는 교차 검증 기능을 직접 구현하면 됨\n","# 사이킷런의 cross_val_score() 함수와 거의 같은 작업을 수행한다\n","'''\n","from sklearn.model_selection import StratifiedKFold\n","from sklearn.base import clone\n","\n","skfolds = StratifiedKFold(n_splits=3, random_state=42, shuffle=True)\n","\n","for train_index, test_index in skfolds.split(X_train, y_train_5):\n","    clone_clf = clone(sgd_clf)\n","    X_train_folds = X_train[train_index]\n","    y_train_folds = y_train_5[train_index]\n","    X_test_fold = X_train[test_index]\n","    y_test_fold = y_train_5[test_index]\n","\n","    clone_clf.fit(X_train_folds, y_train_folds)\n","    y_pred = clone_clf.predict(X_test_fold)\n","    n_correct = sum(y_pred == y_test_fold)\n","    print(n_correct / len(y_pred)) # 0.9502, 0.96565, 0.96495 출력\n","'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":425},"collapsed":true,"id":"xmProX5MyAI3","executionInfo":{"status":"error","timestamp":1738072240822,"user_tz":-540,"elapsed":18,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"dcc92a84-5357-4eac-8f40-ed99fa7d36a3"},"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"\"None of [Index([    1,     3,     4,     5,     7,     8,    10,    11,    12,    13,\\n       ...\\n       59984, 59985, 59987, 59988, 59989, 59991, 59993, 59994, 59996, 59998],\\n      dtype='int64', length=40000)] are in the [columns]\"","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-be4735aee3e7>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mtrain_index\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_index\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mskfolds\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train_5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mclone_clf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mclone\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msgd_clf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m     \u001b[0mX_train_folds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m     \u001b[0my_train_folds\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_train_5\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtrain_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0mX_test_fold\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mtest_index\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   4106\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4107\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 4108\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_indexer_strict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"columns\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   4109\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   4110\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_get_indexer_strict\u001b[0;34m(self, key, axis_name)\u001b[0m\n\u001b[1;32m   6198\u001b[0m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnew_indexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_reindex_non_unique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6199\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6200\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_raise_if_missing\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6201\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6202\u001b[0m         \u001b[0mkeyarr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36m_raise_if_missing\u001b[0;34m(self, key, indexer, axis_name)\u001b[0m\n\u001b[1;32m   6247\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6248\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mnmissing\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 6249\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   6250\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   6251\u001b[0m             \u001b[0mnot_found\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmissing_mask\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnonzero\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munique\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index([    1,     3,     4,     5,     7,     8,    10,    11,    12,    13,\\n       ...\\n       59984, 59985, 59987, 59988, 59989, 59991, 59993, 59994, 59996, 59998],\\n      dtype='int64', length=40000)] are in the [columns]\""]}]},{"cell_type":"markdown","source":["폴드가 3개인 k-겹 교차 검증을 사용해 SGDClassifier 모델을 평가해보니, 모든 교차검증 폴드에 대해 정확도(정확한 예측의 비율)가 95% 이상이다"],"metadata":{"id":"gQ8riiIYzVtX"}},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_score\n","cross_val_score(sgd_clf, X_train, y_train_5, cv=3, scoring='accuracy')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rqRB2CL0y9H3","executionInfo":{"status":"ok","timestamp":1738072318706,"user_tz":-540,"elapsed":44097,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"4779fc31-0458-498f-a869-1459b406d35f"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.95035, 0.96035, 0.9604 ])"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["모든 이미지를 '5아님'클래스로 분류하는 더미 분류기를 만들어 비교해보자"],"metadata":{"id":"Y2WdOlRuz7sW"}},{"cell_type":"code","source":["from sklearn.base import BaseEstimator\n","\n","class Never5Classifier(BaseEstimator):\n","  def fit(self, X, y=None):\n","    return self\n","  def predict(self, X):\n","    return np.zeros((len(X), 1), dtype=bool)"],"metadata":{"id":"lX_nYDFk0BuT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["never_5_clf = Never5Classifier()\n","cross_val_score(never_5_clf, X_train, y_train_5, cv=3, scoring='accuracy')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"w_xcSifA0ZIH","executionInfo":{"status":"ok","timestamp":1738072318707,"user_tz":-540,"elapsed":6,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"115bb00b-4eec-41d8-fc63-32a826ddc653"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([0.91125, 0.90855, 0.90915])"]},"metadata":{},"execution_count":15}]},{"cell_type":"markdown","source":["-> 이미지의 10%만 숫자 5이기 때문에 무조건 5아님으로 예측하면 정확히 맞출 확률이 90%이다.\n","하지만 정확도를 분류기의 성능 지표로 선호하지 않는 이유를 보여준다. 특히 불균형한 데이터셋을 다룰 때 더욱 그렇다."],"metadata":{"id":"OA-IJbpt0tDn"}},{"cell_type":"markdown","source":["## 3.3.2 오차행렬"],"metadata":{"id":"VA-YFDOT1agp"}},{"cell_type":"code","source":["from sklearn.model_selection import cross_val_predict\n","\n","y_train_pred = cross_val_predict(sgd_clf, X_train, y_train_5, cv=3)"],"metadata":{"id":"rGZ2MojE0-ig"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["-> cross_val_score()함수처럼 cross_val_predict()함수는 k-겹 교차검증을 수행하지만 평가 점수를 반환하지 않고 각 테스트 폴드에서 얻은 예측을 반환함"],"metadata":{"id":"bjC7QEMZ1sYd"}},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","\n","confusion_matrix(y_train_5, y_train_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t-hex72s1r_M","executionInfo":{"status":"ok","timestamp":1738072351110,"user_tz":-540,"elapsed":15,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"b264dc73-6f1e-4bba-f7d9-4a08738357ed"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[53892,   687],\n","       [ 1891,  3530]])"]},"metadata":{},"execution_count":17}]},{"cell_type":"markdown","source":["-> 687개는 거짓 양성, 1891개는 거짓 음성이다. 완벽한 분류기라면 오차행렬의 주대각선만 0이 아닌 값이 된다."],"metadata":{"id":"pUBMhoqZ2Mlb"}},{"cell_type":"code","source":["y_train_perfect_predictions = y_train_5 # 완벽한 분류기일 경우\n","confusion_matrix(y_train_5, y_train_perfect_predictions)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rxjbUoV42Ras","executionInfo":{"status":"ok","timestamp":1738072351110,"user_tz":-540,"elapsed":13,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"1fb1ce48-e4d6-465a-8b24-c9aca47aa5ba"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[54579,     0],\n","       [    0,  5421]])"]},"metadata":{},"execution_count":18}]},{"cell_type":"markdown","source":["-> 오차행렬이 많은 정보를 제공하지만 요약된 지표도 필요할 때가 있다. 양성 예측의 정확도인 '정밀도'와 분류기가 정확하게 감지한 양성 샘플의 비율인 '재현율'과 같이 사용하는 것이 일반적!"],"metadata":{"id":"n0HJru4r26fn"}},{"cell_type":"markdown","source":["## 3.3.3 정밀도와 재현율"],"metadata":{"id":"0V2scdxI3epW"}},{"cell_type":"code","source":["from sklearn.metrics import precision_score, recall_score\n","\n","precision_score(y_train_5, y_train_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RmdULEsE3Szj","executionInfo":{"status":"ok","timestamp":1738072351111,"user_tz":-540,"elapsed":13,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"6a63110c-7358-4e26-f8cb-373ce1086f7b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8370879772350012"]},"metadata":{},"execution_count":19}]},{"cell_type":"code","source":["recall_score(y_train_5, y_train_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kUmMb_3J31MJ","executionInfo":{"status":"ok","timestamp":1738072351111,"user_tz":-540,"elapsed":11,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"795ea3fd-9026-47bf-b833-9389dece23cb"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.6511713705958311"]},"metadata":{},"execution_count":20}]},{"cell_type":"markdown","source":["정밀도와 재현율을 F1 점수라고 하는 하나의 숫자로 만들면 편리할 때가 많다. F1 점수는 정밀도와 재현율의 조화 평균임"],"metadata":{"id":"Nank-h8w3_6Y"}},{"cell_type":"code","source":["from sklearn.metrics import f1_score\n","\n","f1_score(y_train_5, y_train_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FA2Z2Gac4IkG","executionInfo":{"status":"ok","timestamp":1738072351111,"user_tz":-540,"elapsed":9,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"81157b5d-839d-429a-b831-bf34e98b3b9d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.7325171197343847"]},"metadata":{},"execution_count":21}]},{"cell_type":"markdown","source":["정밀도/재현율 트레이드오프가 나타난다. 상황에 따라 둘 중 어느 것을 중시할지 선택 ex) 어린아이에게 안전한 동영상을 걸러내는 분류기를 훈련시킨다 -> 높은 정밀도 & 낮은 재현율을 가진 분류기를 선호할 것임"],"metadata":{"id":"Z0SZqnka4aIF"}},{"cell_type":"markdown","source":["## 3.3.4 정밀도/재현율 트레이드오프"],"metadata":{"id":"6a0lQRDKKeBm"}},{"cell_type":"markdown","source":["임곗값을 높일수록 재현율은 낮아지고 정밀도는 높아진다"],"metadata":{"id":"F75b7eGTLVjh"}},{"cell_type":"markdown","source":["분류기의 predict() 메서드 대신 decision_function() 메서드를 호출하면 각 샘플의 점수를 얻을 수 있다. 이 점수를 기반으로 원하는 임곗값을 정해 예측을 만들 수 있다"],"metadata":{"id":"GJQuL0bRMG8v"}},{"cell_type":"code","source":["y_scores = sgd_clf.decision_function([some_digit])\n","y_scores"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"6PB0n-hk464k","executionInfo":{"status":"ok","timestamp":1738072351111,"user_tz":-540,"elapsed":7,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"57f5d3a5-eabd-4473-8f18-197a656e3a31"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but SGDClassifier was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([2164.22030239])"]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["threshold=0\n","y_some_digit_pred = (y_scores > threshold)\n","y_some_digit_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VPMWzEviLEoR","executionInfo":{"status":"ok","timestamp":1738072499972,"user_tz":-540,"elapsed":623,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"5370f39a-2e8e-4311-dbed-3ea4ff733c6e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ True])"]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["threshold=8000\n","y_some_digit_pred = (y_scores > threshold)\n","y_some_digit_pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ePty6xAhLmY8","executionInfo":{"status":"ok","timestamp":1738072505206,"user_tz":-540,"elapsed":437,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"600ef355-2b6f-421e-e7ca-ade951ffef7a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([False])"]},"metadata":{},"execution_count":25}]},{"cell_type":"markdown","source":["-> 이미지가 실제로 5이고 임곗값이 0일 때는 분류기가 이를 감지했지만, 임곗값을 8000으로 높이면 이를 놓치게 됨 (재현율이 줄어든다는 의미)"],"metadata":{"id":"-1Hq7uALMhJ6"}},{"cell_type":"code","source":["# method를 다음과 같이 설정하여 예측 결과가 아니라 결정점수를 반환받도록 지정해야 함\n","\n","y_scores = cross_val_predict(sgd_clf, X_train, y_train_5, cv=3, method='decision_function')"],"metadata":{"id":"ulIpp461M1Ho"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.metrics import precision_recall_curve\n","\n","precisions, recalls, thresholds = precision_recall_curve(y_train_5, y_scores)"],"metadata":{"id":"amZi4AfBNe-4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_precision_recall_vs_threshold(precisions, recalls, thresholds):\n","  plt.plot(thresholds, precisions[:-1], 'b--', label='Precision')\n","  plt.plot(thresholds, recalls[:-1], 'g-', label='Recall')\n","  [...]\n","\n","plot_precision_recall_vs_threshold(precisions, recalls, thresholds)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":430},"id":"Ts6G7VmPNpmY","executionInfo":{"status":"ok","timestamp":1738072906465,"user_tz":-540,"elapsed":524,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"1e61a4d1-eff7-4c51-b6c7-b7a6c828596c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["threshold_90_precision = thresholds[np.argmax(precisions >= 0.90)]\n","# 정밀도가 90%가 되는 가장 낮은 임곗값을 찾을 수 있음. np.argmax()는 최댓값의 첫번째 인덱스를 반환. 여기선 첫번째 True값을 의미함"],"metadata":{"id":"472rQ_yDN3PR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_train_pred_90 = (y_scores >= threshold_90_precision)"],"metadata":{"id":"ULolnWJIOw_p"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(precision_score(y_train_5, y_train_pred_90))\n","recall_score(y_train_5, y_train_pred_90)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dq6BYAabO4NH","executionInfo":{"status":"ok","timestamp":1738073180056,"user_tz":-540,"elapsed":453,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"536111b8-c2d7-4a35-c18b-69e531fc9259"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["0.9000345901072293\n"]},{"output_type":"execute_result","data":{"text/plain":["0.4799852425751706"]},"metadata":{},"execution_count":32}]},{"cell_type":"markdown","source":["-> 정밀도가 90%를 달성한 분류기를 만들었다."],"metadata":{"id":"xSk7i3KtPB_x"}},{"cell_type":"markdown","source":["## 3.3.5 ROC곡선"],"metadata":{"id":"lNMcdnlyQUZL"}},{"cell_type":"markdown","source":["- TPR = 재현율 (진짜양성비율)\n","- FPR = 가짜양성비율\n","-> ROC 곡선은 FPR에 대한 TPR의 곡선이다.  "],"metadata":{"id":"dnXpLaQlQhzP"}},{"cell_type":"code","source":["from sklearn.metrics import roc_curve\n","\n","fpr, tpr, threshodlds = roc_curve(y_train_5, y_scores)"],"metadata":{"id":"bcMJ0TnZPOPk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_roc_curve(fpr, tpr, label=None):\n","    plt.plot(fpr, tpr, linewidth=2, label=label)\n","    plt.plot([0, 1], [0, 1], 'k--')\n","    plt.axis([0, 1, 0, 1])\n","    plt.xlabel('False Positive Rate', fontsize=16)\n","    plt.ylabel('True Positive Rate', fontsize=16)\n","\n","plt.figure(figsize=(8,6))\n","plot_roc_curve(fpr, tpr)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":510},"id":"CjeZP8SVRdnI","executionInfo":{"status":"ok","timestamp":1738073847038,"user_tz":-540,"elapsed":654,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"94947e2a-ca56-4a95-effb-1e41f89e5f31"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.metrics import roc_auc_score\n","roc_auc_score(y_train_5, y_scores)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ka9jl4fnRpwR","executionInfo":{"status":"ok","timestamp":1738073906434,"user_tz":-540,"elapsed":421,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"07a06a51-cd8c-4151-c045-6b6a7cebe9bc"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9604938554008616"]},"metadata":{},"execution_count":35}]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"UMyo_CKJSIR5"}},{"cell_type":"markdown","source":["RandomForestClassifier를 훈련시켜 SGDClassifier의 ROC곡선과 ROX AUC 점수를 비교해보자"],"metadata":{"id":"tgaA7WW_R1wy"}},{"cell_type":"code","source":["from sklearn.ensemble import RandomForestClassifier\n","\n","forest_clf = RandomForestClassifier(random_state=42)\n","y_probas_forest = cross_val_predict(forest_clf, X_train, y_train_5,\n","                                    cv=3, method=\"predict_proba\")"],"metadata":{"id":"nztqaoJHSHKz"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["y_scores_forest = y_probas_forest[:, 1] # 양성 클래스에 대한 확률을 점수로 사용함\n","fpr_forest, tpr_forest, threshold_forest = roc_curve(y_train_5, y_scores_forest)"],"metadata":{"id":"zRRBuxP8SOeO"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.plot(fpr, tpr, \"b:\", label=\"SGD\")\n","plot_roc_curve(fpr_forest, tpr_forest, \"Random Forest\")\n","plt.legend(loc=\"lower right\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":461},"id":"tSEihXT_SlpO","executionInfo":{"status":"ok","timestamp":1738074127484,"user_tz":-540,"elapsed":657,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"661fc9d7-db07-4430-cb99-cb6c8659d1c5"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["roc_auc_score(y_train_5, y_scores_forest)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"blSfUv-kSqAy","executionInfo":{"status":"ok","timestamp":1738074161726,"user_tz":-540,"elapsed":455,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"6bd93f2e-bf6b-4bbe-dc79-b563e1a33d52"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9983436731328145"]},"metadata":{},"execution_count":39}]},{"cell_type":"code","source":["y_train_pred = cross_val_predict(forest_clf, X_train, y_train_5, cv=3)"],"metadata":{"id":"mdaa_pdlTKmD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["precision_score(y_train_5, y_train_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HOsC4VeGTLC_","executionInfo":{"status":"ok","timestamp":1738074411177,"user_tz":-540,"elapsed":455,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"20ea11ed-97e9-4a6b-f509-0de45c836263"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9905083315756169"]},"metadata":{},"execution_count":41}]},{"cell_type":"code","source":["recall_score(y_train_5, y_train_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F55_XmTfTcsn","executionInfo":{"status":"ok","timestamp":1738074413173,"user_tz":-540,"elapsed":407,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"f3ff773a-0648-4ed8-b352-197567ebb4a3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.8662608374838591"]},"metadata":{},"execution_count":42}]},{"cell_type":"markdown","source":["-> roc auc 점수와 재현율, 정밀도 모두 rf일 때 sgd보다 더 좋아졌다. 또한 roc 곡선만 봐도 좋다는 것을 알 수 있다"],"metadata":{"id":"0d6XSvnETwbN"}},{"cell_type":"markdown","source":["# 3.4 다중 분류"],"metadata":{"id":"WyGXDVt4TW8X"}},{"cell_type":"markdown","source":["- OvR 전략: 특정 숫자 하나만 구분하는 숫자별 이진 분류기를 여러 개 사용해 다중 클래스를 분류하는 기법\n","- OvO 전략: 각 숫자의 조합마다(ex. 0과 1, 0과 2 등) 이진 분류기를 훈련시키는 것\n"],"metadata":{"id":"2D7jjTJEUjE_"}},{"cell_type":"markdown","source":["대부분의 이진 분류 알고리즘에서는 OvR를 선호한다.(서포트 벡터 머신 같은 일부 알고리즘 제외) 다중 클래스 분류 작업에 이진 분류 알고리즘을 선택하면 사이킷런이 알고리즘에 따라 자동으로 OvR 또는 OvO를 실행한다."],"metadata":{"id":"kV8vZCrhVE2I"}},{"cell_type":"code","source":["from sklearn.svm import SVC\n","\n","svm_clf = SVC()\n","svm_clf.fit(X_train, y_train) # y_train_5가 아니고 y_train을 사용한다\n","svm_clf.predict([some_digit])"],"metadata":{"id":"abOIjRTwTWvN","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1738121936260,"user_tz":-540,"elapsed":332374,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"19a59825-38dd-49ea-85e6-e88e5e10abd4"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array(['5'], dtype=object)"]},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["# OvO 전략을 사용했는지 정말 확인하기\n","\n","some_digit_scores = svm_clf.decision_function([some_digit])\n","some_digit_scores"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kx3kXHucH7oc","executionInfo":{"status":"ok","timestamp":1738122027101,"user_tz":-540,"elapsed":304,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"7ac003fb-9794-4cb1-dc23-f2322ca94192"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but SVC was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["array([[ 1.72501977,  2.72809088,  7.2510018 ,  8.3076379 , -0.31087254,\n","         9.3132482 ,  1.70975103,  2.76765202,  6.23049537,  4.84771048]])"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["-> 샘플당 1개가 아니라 10개의 점수를 반환하는 것을 확인할 수 있음"],"metadata":{"id":"f-_xNHClI1KY"}},{"cell_type":"code","source":["np.argmax(some_digit_scores)\n","svm_clf.classes_\n","svm_clf.classes_[5]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"w1X14PcqIeOZ","executionInfo":{"status":"ok","timestamp":1738122027934,"user_tz":-540,"elapsed":524,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"7dcc146b-dd85-4619-9874-7f51c3796325"},"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'5'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# 사이킷런에서 OvO나 OvR을 사용하도록 강제하기\n","\n","from sklearn.multiclass import OneVsOneClassifier\n","ovr_clf = OneVsOneClassifier(SVC())\n","ovr_clf.fit(X_train, y_train)\n","print(ovr_clf.predict([some_digit]))\n","len(ovr_clf.estimators_)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KrHiCL2hI8L9","executionInfo":{"status":"ok","timestamp":1738122372146,"user_tz":-540,"elapsed":342824,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"2ff93889-afd1-4ef0-f24e-de12892c6350"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["['5']\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning: X does not have valid feature names, but OneVsOneClassifier was fitted with feature names\n","  warnings.warn(\n"]},{"output_type":"execute_result","data":{"text/plain":["45"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# SGD 분류기는 직접 샘플을 다중클래스로 분류할 수 있으므로 별도로 사이킷런의 OvR이나 OvO를 적용할 필요 없음\n","\n","sgd_clf.fit(X_train, y_train)\n","sgd_clf.predict([some_digit])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":211},"id":"OiXrrcd8JnB8","executionInfo":{"status":"error","timestamp":1738122378816,"user_tz":-540,"elapsed":379,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"793d73b1-4224-4222-b662-dd1ee39acb99"},"execution_count":12,"outputs":[{"output_type":"error","ename":"NameError","evalue":"name 'sgd_clf' is not defined","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-cbf6b40dc624>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# SGD 분류기는 직접 샘플을 다중클래스로 분류할 수 있으므로 별도로 사이킷런의 OvR이나 OvO를 적용할 필요 없음\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0msgd_clf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0msgd_clf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0msome_digit\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'sgd_clf' is not defined"]}]},{"cell_type":"code","source":["cross_val_score(sgd_clf, X_train, y_train, cv=3, scoring='accuracy')"],"metadata":{"id":"ONeUrvLpKIYY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 입력 스케일을 조정하면 정확도를 89% 이상으로 높일 수 있음\n","\n","from sklearn.preprocessing import StandardScaler\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train.astype(np.float64))\n","cross_val_score(sgd_clf, X_train_scaled, y_train, cv=3, scoring='accuracy')"],"metadata":{"id":"1Wh_IwrgKSwh"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 3.5 에러 분석"],"metadata":{"id":"jhPVdJ0EKnI-"}},{"cell_type":"markdown","source":["가능성이 높은 모델을 하나 찾았다고 가정하고 이 모델의 성능을 향상시킬 방법을 찾아보는 것이다. 한 가지 방법은 만들어진 에러의 종류를 분석하는 것이다."],"metadata":{"id":"2bArEC-tLCxl"}},{"cell_type":"code","source":["# 오차행렬 살펴보기\n","y_train_pred = cross_val_predict(sgd_clf, X_train_scaled, y_train, cv=3)\n","conf_mx = confusion_matrix(y_train, y_train_pred)\n","conf_mx"],"metadata":{"id":"OTYLIwB5KnA3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 오차행렬을 이미지로 표현\n","\n","plt.matshow(conf_mx, cmap=plt.cm.gray)\n","plt.show()"],"metadata":{"id":"iAbJYwRPLsiK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 오차행렬의 각 값을 대응되는 클래스의 이미지 개수로 나누어 에러 비율을 비교함\n","\n","row_sums = conf_mx.sum(axis=1, keepdims=True)\n","norm_conf_mx = conf_mx / row_sums\n","np.fill_diagonal(norm_conf_mx, 0)\n","plt.matshow(norm_conf_mx, cmap=plt.cm.gray)\n","plt.show()"],"metadata":{"id":"Fkp25J7yL659"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["cl_a, cl_b = 3, 5\n","X_aa = X_train[(y_train == cl_a) & (y_train_pred == cl_a)]\n","X_ab = X_train[(y_train == cl_a) & (y_train_pred == cl_b)]\n","X_ba = X_train[(y_train == cl_b) & (y_train_pred == cl_a)]\n","X_bb = X_train[(y_train == cl_b) & (y_train_pred == cl_b)]\n","plt.figure(figsize=(8,8))\n","plt.subplot(221); plot_digits(X_aa[:25], images_per_row=5)\n","plt.subplot(222); plot_digits(X_ab[:25], images_per_row=5)\n","plt.subplot(223); plot_digits(X_ba[:25], images_per_row=5)\n","plt.subplot(224); plot_digits(X_bb[:25], images_per_row=5)\n","plt.show()"],"metadata":{"id":"ykV9P5UuMmbA"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 3.6 다중 레이블 분류"],"metadata":{"id":"9ohf0736M6gZ"}},{"cell_type":"markdown","source":["분류기가 앨리스, 밥, 찰리 세 얼굴을 인식하도록 훈련되었다고 가정하자. 분류기가 앨리스와 찰리가 있는 사진을 본다면 [1,0,1]을 출력해야 할 것. 이처럼 여러개의 이진 꼬리표를 출력하는 분류 시스템을 다중 레이블 분류 시스템이라고 함"],"metadata":{"id":"NjgdBj7xNDf2"}},{"cell_type":"code","source":["from sklearn.neighbors import KNeighhborsClassifier\n","\n","y_train_large = (y_train >= 7)\n","y_train_odd = (y_train % 2 == 1)\n","y_multilabel = np.c_[y_train_large, y_train_odd]\n","\n","knn_clf = KNeighborsClassifier()\n","knn_clf.fit(X_train, y_multilabel)"],"metadata":{"id":"4JGZsfKuM5CT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["knn_clf.predict([some_digit]) # 5는 7보다 크지않고 홀수이므로 올바르게 분류"],"metadata":{"id":"ikJPjd0dNnPU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 다중 분류기를 평가하는 방법 중 하나인 모든 레이블에 대한 F1 점수의 평균 계산하기\n","y_train_knn_pred = cross_val_predict(knn_clf, X_train, y_multilabel, cv=3)\n","f1_score(y_multilabel, y_train_knn_pred, average='macro')"],"metadata":{"id":"QUpC2J9ZNqsw"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# 3.7 다중 출력 분류"],"metadata":{"id":"8ickLFWaOLR8"}},{"cell_type":"markdown","source":["이미지에서 잡음을 제거하는 시스템을 만들어보자. 잡음이 많은 숫자 이미지를 입력으로 받고 깨끗한 숫자 이미지를 픽셀의 강도를 담은 배열로 출력한다."],"metadata":{"id":"YqbKo9OlPBxR"}},{"cell_type":"markdown","source":["분류기의 출력은 다중 레이블이고 (픽셀 당 한 레이블) 각 레이블은 값을 여러개 가진다 (0부터 255까지 픽셀 강도)"],"metadata":{"id":"K_dKgQzEPlwq"}},{"cell_type":"code","source":["# 타깃 이미지는 원본 이미지가 될 것이다\n","\n","noise = np.random.randint(0, 100, (len(X_train), 784))\n","X_train_mod = X_train + noise\n","noise = np.random.randint(0, 100, (len(X_test), 784))\n","X_test_mod = X_test + noise\n","y_train_mod = X_train\n","y_test_mod = X_test"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":0},"collapsed":true,"id":"5PRKdQeVONMZ","executionInfo":{"status":"error","timestamp":1738123825399,"user_tz":-540,"elapsed":1517,"user":{"displayName":"­장서연(자연과학대학 통계학과)","userId":"12019884247107808385"}},"outputId":"afa0db45-33ee-44ca-c32b-ccfa925ca2e9"},"execution_count":21,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"Unable to coerce to DataFrame, shape must be (10000, 784): given (60000, 784)","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-21-c03b67ab2fb7>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mnoise\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m784\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mX_train_mod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_train\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mnoise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0my_test_mod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_test\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mnoise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0my_train_mod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_train\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0my_test_mod\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_test\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/ops/common.py\u001b[0m in \u001b[0;36mnew_method\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m     74\u001b[0m         \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mitem_from_zerodim\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     75\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 76\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     77\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     78\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mnew_method\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/arraylike.py\u001b[0m in \u001b[0;36m__add__\u001b[0;34m(self, other)\u001b[0m\n\u001b[1;32m    184\u001b[0m         \u001b[0mmoose\u001b[0m     \u001b[0;36m3.0\u001b[0m     \u001b[0mNaN\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    185\u001b[0m         \"\"\"\n\u001b[0;32m--> 186\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_arith_method\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moperator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0madd\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    187\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    188\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0munpack_zerodim_and_defer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"__radd__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_arith_method\u001b[0;34m(self, other, op)\u001b[0m\n\u001b[1;32m   7908\u001b[0m         \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmaybe_prepare_scalar_for_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7909\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 7910\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mother\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_align_for_op\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mother\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mflex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   7911\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   7912\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrstate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"ignore\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.11/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m_align_for_op\u001b[0;34m(self, other, axis, flex, level)\u001b[0m\n\u001b[1;32m   8167\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8168\u001b[0m                 \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 8169\u001b[0;31m                     raise ValueError(\n\u001b[0m\u001b[1;32m   8170\u001b[0m                         \u001b[0;34m\"Unable to coerce to DataFrame, shape \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   8171\u001b[0m                         \u001b[0;34mf\"must be {left.shape}: given {right.shape}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Unable to coerce to DataFrame, shape must be (10000, 784): given (60000, 784)"]}]},{"cell_type":"code","source":["knn_clf.fit(X_train_mod, y_train_mod)\n","clean_digit = knn_clf.predict([X_test_mod[some_index]])\n","plot_digit(clean_digit)"],"metadata":{"id":"IjE9HlUvQDoq"},"execution_count":null,"outputs":[]}]}